<?xml version="1.1" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:OCLConstraints="http://www.ikv.de/OCLConstraints.ecore">
  <OCLConstraints:Constraint xmi:id="_ansTkEvLEeC8vaXAN0jU6Q" description="Checks if each safety related hazardous event has a safety goal assigned (ISO 26262-3 7.4.4.3)" message="The ''{0}'' is safety related and has no safety goal assigned" constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;isoAsil:hazard::IsoAsil= self.isoAsil&#xD;&#xA;in&#xD;&#xA;&#x9;if (not isoAsil.oclIsUndefined()) then&#xD;&#xA;&#x9;&#x9;-- we cannot check for ASIL enum value 'None' here because its literal has been changed to empty string and the engine queries the enum by its literal&#xD;&#xA;&#x9;&#x9;(if isoAsil.value = IsoSafetyLevelClass::A or isoAsil.value = IsoSafetyLevelClass::B or isoAsil.value = IsoSafetyLevelClass::C or isoAsil.value = IsoSafetyLevelClass::D then&#xD;&#xA;&#x9;&#x9;&#x9;not (self.safetyGoal.oclIsUndefined())&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;endif)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif" mediniIdentifier="0002">
    <target xmi:id="_ansTkUvLEeC8vaXAN0jU6Q" class="hazard::HazardousEvent"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_wFQBUEvLEeC8vaXAN0jU6Q" description="Checks if every safety goal has an unique identifier (ISO 26262-8 6.4.2.5 a)" message="The ''{0}'' has no unique identifier" constraintExpression="inv:&#xD;&#xA;if ((not self.identifier.oclIsUndefined()) and (self.identifier&lt;&gt;'')) then&#xD;&#xA;&#x9;&#x9; safetygoals::SafetyGoal.allInstances()-&gt;one(element|element.identifier = self.identifier)&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0032">
    <target xmi:id="_wFQBUUvLEeC8vaXAN0jU6Q" class="safetygoals::SafetyGoal"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_yUb1sEvLEeC8vaXAN0jU6Q" description="Checks if every hazardous event has an unique identifier" message="The ''{0}'' has no (unique) identifier" constraintExpression="inv:&#xD;&#xA;if ((not self.id.oclIsUndefined()) and (self.id&lt;&gt;'')) then&#xD;&#xA;&#x9;hazard::HazardousEvent.allInstances()-&gt;one(element|element.id = self.id)&#xD;&#xA;else&#xD;&#xA;&#x9;false&#xD;&#xA;endif" mediniIdentifier="0033">
    <target xmi:id="_yUb1sUvLEeC8vaXAN0jU6Q" class="hazard::HazardousEvent"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_MvMIALESEd-pH-uYPPA2FQ" severity="WARNING" description="Checks for name differences between FMEA components and corresponding system model elements" message="Name of {0} is different from corresponding system model element(s): {1}" constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;parts:Sequence(sysml::SysMLPart) = self.mediniGetTracedElements(sysml::SysMLPart)&#xD;&#xA;in&#xD;&#xA;parts-&gt;select(part|part.name&lt;&gt;self.name)&#x9;-&gt;isEmpty()&#xD;&#xA;" mediniIdentifier="0017">
    <target xmi:id="_MvMIAbESEd-pH-uYPPA2FQ" class="FMEA::Component"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_BFSKUJyeEeCK86MROjdcWg" description="Checks that ASIL of system model element is same or higher than required by its requirements (ISO 26262-4 7.4.2.2)" message="ASIL of {0} is lower than required by its requirements" constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;info:safetyModel::SafetyInformation=self.safetyInformation,&#xD;&#xA;&#x9;reqs:Sequence(traceability::Trace)=self.mediniGetTracedElements(safetygoals::SafetyRequirement)&#xD;&#xA;in&#xD;&#xA;&#x9;-- only parts, port usages, and functions/activities support ASIL&#xD;&#xA;&#x9;if (self.oclIsKindOf(sysml::SysMLPart) or self.oclIsKindOf(sysml::SysMLFlowPortUsage) or self.oclIsKindOf(sysml::SysMLActivity)) and (not info.oclIsUndefined()) then&#xD;&#xA;&#x9;&#x9;not reqs-&gt;exists(req|info.compareAsil(req.oclAsType(safetygoals::SafetyRequirement).asil)&lt;0)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;" mediniIdentifier="0048">
    <target xmi:id="_BFSKUZyeEeCK86MROjdcWg" class="sysml::SysMLElement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_tksOADo0EeSM7dc93wKcuw" description="Checks if for each safety goal at least one functional safety requirement is specified (ISO 26262-3 8.4.2.2)" message="{0} has no functional safety requirement specified" constraintExpression="inv:&#xD;&#xA;self.targetRelations-&gt;exists(rel|rel.source.oclIsTypeOf(SafetyRequirement) and rel.source.oclAsType(SafetyRequirement).kind= safetygoals::SafetyReqKind::FUNCTIONAL)" mediniIdentifier="0003">
    <target xmi:id="_tksOATo0EeSM7dc93wKcuw" class="safetygoals::SafetyGoal"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_uGi94Do0EeSM7dc93wKcuw" description="Checks if each safety goal with ASIL C or ASIL D has a FTA traced (ISO 26262-4 7.4.3.1)" message="{0} has no FTA traced" constraintExpression="inv:&#xD;&#xA;if (self.asil='C' or self.asil='D') then&#xD;&#xA;    -- any FTA model, event (node), gate, connection traced?&#xD;&#xA;    not (self.mediniGetTracedElements(FTA::FTAElement)-&gt;isEmpty() and self.mediniGetTracedElements(FTA::EventNode)-&gt;isEmpty())&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif&#xD;&#xA;" mediniIdentifier="0004">
    <target xmi:id="_uGi94To0EeSM7dc93wKcuw" class="safetygoals::SafetyGoal"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_vLE9ADo0EeSM7dc93wKcuw" description="Checks if every safety requirement has an unique identifier (ISO 26262-8 6.4.2.5 a)" message="The ''{0}'' has no unique identifier" constraintExpression="inv:&#xD;&#xA;if ((not self.identifier.oclIsUndefined()) and (self.identifier&lt;&gt;'')) then&#x9;&#xD;&#xA;&#x9;&#x9;safetygoals::SafetyRequirement.allInstances()-&gt;one(element|element.identifier = self.identifier)&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0005">
    <target xmi:id="_vLE9ATo0EeSM7dc93wKcuw" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_y1bu4Do0EeSM7dc93wKcuw" severity="INFO" description="Checks if each safety goal is associated to a hazardous event" message="The ''{0}'' is not associated to a hazardous event" constraintExpression="inv:&#x9;&#xD;&#xA;if self.getCrossReferencedElements()-&gt;any(element|element.oclIsKindOf(hazard::HazardousEvent)).oclIsUndefined() then&#xD;&#xA;&#x9;false&#xD;&#xA;else &#xD;&#xA;&#x9;true&#xD;&#xA;endif&#xD;&#xA;" mediniIdentifier="0006">
    <target xmi:id="_y1bu4To0EeSM7dc93wKcuw" class="safetygoals::SafetyGoal"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_z7szYDo0EeSM7dc93wKcuw" description="Checks if each system model element has a name set (except for connectors and dependencies)" message="{0} has no name set" constraintExpression="inv:&#xD;&#xA;if not (self.oclIsKindOf(SysMLConnector) or self.oclIsKindOf(SysMLDependency)) then&#xD;&#xA;&#x9;self.name&lt;&gt;''&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0007">
    <target xmi:id="_z7szYTo0EeSM7dc93wKcuw" class="sysml::SysMLElement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_06QtYDo0EeSM7dc93wKcuw" description="Checks if each system model port is connected" message="{0} is not connected" constraintExpression="inv:&#xD;&#xA;self.end-&gt;exists(x | x.oclIsTypeOf(EUML::Generic::CompositeStructures::UMLConnectorEnd))&#xD;&#xA;" mediniIdentifier="0008">
    <target xmi:id="_06QtYTo0EeSM7dc93wKcuw" class="sysml::SysMLFlowPortUsage"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_6ciDIDo0EeSM7dc93wKcuw" description="Checks that the ASIL of a hazard matches the ASIL of an associated goal (ISO 26262-3 7.4.4.4)" message="The ASIL of ''{0}'' does not match to ASIL of associated goal" constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;safetyGoal:safetygoals::SafetyGoal = self.safetyGoal&#xD;&#xA;in&#xD;&#xA;&#xD;&#xA;if (not (self.isoAsil.oclIsUndefined() or safetyGoal.oclIsUndefined())) then&#xD;&#xA;&#x9;let&#xD;&#xA;&#x9;&#x9;hazardAsil:hazard::IsoSafetyLevelClass=self.isoAsil.value,&#xD;&#xA;&#x9;&#x9;goalAsil:String=safetyGoal.asil&#xD;&#xA;&#x9;in&#x9;&#xD;&#xA;&#x9;&#x9;(hazardAsil = IsoSafetyLevelClass::A implies  (goalAsil ='A' or goalAsil ='B' or goalAsil ='C' or goalAsil ='D')) and&#xD;&#xA;&#x9;&#x9;(hazardAsil = IsoSafetyLevelClass::B implies  (goalAsil ='B' or goalAsil ='C' or goalAsil ='D')) and &#xD;&#xA;&#x9;&#x9;(hazardAsil = IsoSafetyLevelClass::C implies  (goalAsil ='C' or goalAsil ='D')) and&#xD;&#xA;&#x9;&#x9;(hazardAsil = IsoSafetyLevelClass::D implies  goalAsil ='D')&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif&#xD;&#xA;&#x9;" mediniIdentifier="0012">
    <target xmi:id="_6ciDITo0EeSM7dc93wKcuw" class="hazard::HazardousEvent"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_Akm0oDo1EeSM7dc93wKcuw" description="FTA models should not contain loops" message="FTA connection is part of a loop" constraintExpression="inv:&#xD;&#xA;not self.isInLoop()" mediniIdentifier="0015">
    <target xmi:id="_Akm0oTo1EeSM7dc93wKcuw" class="FTA::Connection"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_EP9FADo1EeSM7dc93wKcuw" description="Checks that for every checked task in a checklist a check date is set." message="A checked task in checklist {1} misses a properly set checking date." constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;MessageArg1:String=self.oclAsType(de::ikv::medini::kernel::MediniObject).mediniGetContainer().oclAsType(Checklist).name&#xD;&#xA;in&#xD;&#xA;if (self.checked) then&#xD;&#xA;&#x9;self.isDateValid()&#xD;&#xA;else &#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0027">
    <target xmi:id="_EP9FATo1EeSM7dc93wKcuw" class="checklist::ChecklistItem"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_FZDbEDo1EeSM7dc93wKcuw" severity="WARNING" description="Checks that checklist tasks have model artifact assigned in case the corresponding checklist template has assigned artifact types for this task." message="There is a checked task in a checklist which has no model artifacts assigned although the corresponding checklist template says so." constraintExpression="inv:&#xD;&#xA;if (self.checked and not self.artifactTypes-&gt;isEmpty()) then&#xD;&#xA;&#x9;not (self.artifacts-&gt;isEmpty())&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0028">
    <target xmi:id="_FZDbETo1EeSM7dc93wKcuw" class="checklist::ChecklistItem"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_IlPqQDo1EeSM7dc93wKcuw" description="Checks if every malfunction has an unique identifier" message="The ''{0}'' has no (unique) identifier" constraintExpression="inv:&#xD;&#xA;if ((not self.id.oclIsUndefined()) and (self.id&lt;&gt;'')) then&#xD;&#xA;&#x9;&#x9; safetyModel::Malfunction.allInstances()-&gt;one(element|element.id = self.id)&#xD;&#xA;else&#xD;&#xA;&#x9;false&#xD;&#xA;endif" mediniIdentifier="0035">
    <target xmi:id="_IlPqQTo1EeSM7dc93wKcuw" class="safetyModel::Malfunction"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_Jwt-4Do1EeSM7dc93wKcuw" description="Checks if every FMEA worksheet has an unique number" message="The ''{0}'' has no (unique) number" constraintExpression="inv:&#xD;&#xA;if ((not self.fmeaNumber.oclIsUndefined()) and (self.fmeaNumber&lt;&gt;'')) then&#xD;&#xA;&#x9;FMEA::FMEAWorksheet.allInstances()-&gt;one(element|element.fmeaNumber = self.fmeaNumber)&#xD;&#xA;else&#xD;&#xA;&#x9;false&#xD;&#xA;endif" mediniIdentifier="0036">
    <target xmi:id="_Jwt-4To1EeSM7dc93wKcuw" class="FMEA::FMEAWorksheet"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_KllxYDo1EeSM7dc93wKcuw" description="Checks that voting gates have at least as much inputs as the threshold set" message="Number of inputs for ''{0}'' is less than its threshold set" constraintExpression="inv:&#xD;&#xA;not (self.inputs.outputNode-&gt;&#xD;&#xA;&#x9;collect(node|&#xD;&#xA;&#x9;&#x9;if node.oclIsTypeOf(fta::EventNode) then&#xD;&#xA;&#x9;&#x9;&#x9;node.oclAsType(fta::EventNode).event&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;node&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;)-&gt;asSet()-&gt;size()&lt;self.threshold)" mediniIdentifier="0037">
    <target xmi:id="_KllxYTo1EeSM7dc93wKcuw" class="FTA::VotingGate"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_LZONwDo1EeSM7dc93wKcuw" description="Checks that transfer gates have a target set" message="The ''{0}'' has no target set" constraintExpression="inv:&#xD;&#xA;not self.targetEventNode.oclIsUndefined()" mediniIdentifier="0038">
    <target xmi:id="_LZONwTo1EeSM7dc93wKcuw" class="FTA::TransferGate"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_MZKn0Do1EeSM7dc93wKcuw" description="Checks that voting gates do not have threshold of zero" message="The threshold of zero for ''{0}'' is not allowed" constraintExpression="inv:&#xD;&#xA;self.threshold&lt;&gt;0" mediniIdentifier="0039">
    <target xmi:id="_MZKn0To1EeSM7dc93wKcuw" class="FTA::VotingGate"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_OIEZoDo1EeSM7dc93wKcuw" severity="WARNING" description="Checks for hardware parts with failure rate 0.0" message="The ''{0}'' has failure rate 0.0" constraintExpression="inv:&#xD;&#xA;&#x9;self.typeCode &lt;&gt; 'Hardware Part' or self.failureRate&lt;&gt;0.0" mediniIdentifier="0042">
    <target xmi:id="_OIEZoTo1EeSM7dc93wKcuw" class="sysml::SysMLPart"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_Pum5oDo1EeSM7dc93wKcuw" severity="WARNING" description="Checks for components with failure rate 0.0" message="The ''{0}'' has failure rate 0.0" constraintExpression="inv:&#xD;&#xA;if self.oclIsTypeOf(FMEA::Component) then&#xD;&#xA;&#x9;-- detached FMEA&#xD;&#xA;&#x9;self.failureRate&lt;&gt;0.0&#xD;&#xA;else if&#x9;  self.element.oclIsTypeOf(sysml::SysMLPart) or self.element.oclIsKindOf(sysml::SysMLBlock) or self.element.oclIsKindOf(sysml::SysMLPort) or self.element.oclIsKindOf(sysml::SysMLPortUsage) then&#xD;&#xA;&#x9;&#x9;-- derived FMEA&#xD;&#xA;&#x9;&#x9;self.element.oclAsType(sysml::SysMLElement).failureRate&lt;&gt;0.0&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;endif" mediniIdentifier="0043">
    <target xmi:id="_Pum5oTo1EeSM7dc93wKcuw" class="FMEA::ComponentEntry"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_RS598Do1EeSM7dc93wKcuw" severity="WARNING" description="Checks for failure modes with failure rate 0.0" message="The ''{0}'' has failure rate 0.0" constraintExpression="inv:&#xD;&#xA;if self.oclIsKindOf(FMEA::PlainFailureMode) then&#xD;&#xA;&#x9;-- failure mode in detached FMEA &#xD;&#xA;&#x9;&#x9;self.oclAsType(FMEA::PlainFailureMode).failureRate&lt;&gt;0.0&#xD;&#xA;else if self.element.oclIsKindOf(safetyModel::FailureMode) then&#xD;&#xA;&#x9;&#x9;-- failure mode in derived FMEA&#xD;&#xA;&#x9;&#x9;self.element.oclAsType(safetyModel::FailureMode).failureRate&lt;&gt;0.0&#xD;&#xA;&#x9; else&#xD;&#xA;&#x9; &#x9;true&#xD;&#xA;&#x9; endif&#xD;&#xA;endif" mediniIdentifier="0045">
    <target xmi:id="_RS598To1EeSM7dc93wKcuw" class="FMEA::FailureEntry"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_RzwBMDo1EeSM7dc93wKcuw" description="Checks that ASIL of system model element is same or higher than ASIL of parent unless system model element has independence flag set (ISO 26262-4 7.4.2.3)" message="ASIL for {0} is lower than required by its parent" constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;info:safetyModel::SafetyInformation=self.safetyInformation,&#xD;&#xA;&#x9;container:de::ikv::medini::kernel::MediniObject=self.mediniGetContainer()&#xD;&#xA;in&#xD;&#xA;&#x9;-- only parts, port usages, and functions/activities support ASIL&#xD;&#xA;&#x9;if (self.oclIsKindOf(sysml::SysMLPart) or self.oclIsKindOf(sysml::SysMLFlowPortUsage) or self.oclIsKindOf(sysml::SysMLActivity)) and (not info.oclIsUndefined()) then&#xD;&#xA;&#x9;&#x9;if (not info.independent) and (not container.oclIsUndefined()) then&#xD;&#xA;&#x9;&#x9;&#x9;if container.oclIsKindOf(sysml::SysMLElement) and not container.mediniGetContainer().oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-- model does not have ASIL&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if not container.oclAsType(sysml::SysMLElement).safetyInformation.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;info.compareAsil(container.oclAsType(sysml::SysMLElement).safetyInformation)&gt;=0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;" mediniIdentifier="0046">
    <target xmi:id="_RzwBMTo1EeSM7dc93wKcuw" class="sysml::SysMLElement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_SfQcUDo1EeSM7dc93wKcuw" description="Checks that system model elements have independence comment if independence flag is set" message="No independence comment given for {0}" constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;info:safetyModel::SafetyInformation= self.safetyInformation&#xD;&#xA;in&#xD;&#xA;&#x9;if not info.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;info.independent implies (not info.independenceComment.oclIsUndefined() and info.independenceComment&lt;&gt;'')&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif" mediniIdentifier="0047">
    <target xmi:id="_SfQcUTo1EeSM7dc93wKcuw" class="sysml::SysMLElement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_T6aywDo1EeSM7dc93wKcuw" description="Checks if for each decomposed safety requirement an independence argument requirement is specified" message="{0} has no independence argument requirement specified" constraintExpression="inv:&#xD;&#xA;if(self.subRequirements-&gt;exists(sub|sub.oclIsTypeOf(SafetyRequirement) and sub.oclAsType(SafetyRequirement).decomposingRequirement= true)) then&#xD;&#xA;&#x9;self.targetRelations-&gt;exists(rel|rel.source.oclIsTypeOf(SafetyRequirement) and rel.oclAsType(SafetyReqRelation).kind= SafetyReqRelationKind::INDEPENDENCY)&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0049">
    <target xmi:id="_T6aywTo1EeSM7dc93wKcuw" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_U_Zd0Do1EeSM7dc93wKcuw" severity="WARNING" description="Checks that all worksheets do have at least on safety goal defined" message="{0} has no safety goal defined" constraintExpression="inv:&#xD;&#xA;self.safetyGoal-&gt;exists(goal|goal.oclIsTypeOf(safetygoals::SafetyGoal))&#xD;&#xA;" mediniIdentifier="0050">
    <target xmi:id="_U_Zd0To1EeSM7dc93wKcuw" class="dc::DCWorksheet"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_Vuaf8Do1EeSM7dc93wKcuw" description="Checks that metric target values fit to highest ASIL of worksheet's goals." message="Metric target values for {0} does not fit to highest ASIL of worksheet's goals." constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;asils:OrderedSet(String)= self.safetyGoal-&gt;select(goal|goal.oclIsTypeOf(safetygoals::SafetyGoal))-&gt;collect(goal|goal.oclAsType(safetygoals::SafetyGoal).asil)&#xD;&#xA;in&#xD;&#xA;&#x9;-- for individual metrics we don't care the target values set at the worksheet&#xD;&#xA;&#x9; self.individualMetrics or asils-&gt;forAll(asil|&#xD;&#xA;&#x9;&#x9;((asil='B') implies self.spfTargetValue&gt;=90.0 and self.lmpfTargetValue&gt;=60.0) and&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;((asil='C') implies self.spfTargetValue&gt;=97.0 and self.lmpfTargetValue&gt;=80.0) and&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;((asil='D') implies self.spfTargetValue&gt;=99.0 and self.lmpfTargetValue&gt;=90.0)&#xD;&#xA;&#x9;)" mediniIdentifier="0051">
    <target xmi:id="_Vuaf8To1EeSM7dc93wKcuw" class="dc::DCWorksheet"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_PbQDUDo2EeSM7dc93wKcuw" severity="WARNING" description="Checks that each Hazard model is traced to an item" message="{0} Hazard has no item traced" constraintExpression="inv:&#xD;&#xA;self.mediniGetTracedElements(PlainItem)-&gt;notEmpty()&#xD;&#xA;" mediniIdentifier="0013">
    <target xmi:id="_PbQDUTo2EeSM7dc93wKcuw" class="hazard::HazardAnalysisModel"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_0z284DzFEeSh85v0OrcBCg" description="Checks that all FMEA components have pendants in at least one system model the worksheet is derived of" message="{0} has no corresponding system model element in any of the system model(s): {1}" constraintExpression="def:&#xD;&#xA;&#x9;-- returns all (also nested) parts of the given model&#xD;&#xA;&#x9;getParts(_model:sysml::SysMLContainerPackage):Bag(sysml::SysMLPart)&#xD;&#xA;&#x9;= &#x9;let&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;parts:Bag(sysml::SysMLPart)= _model.the_owned_elements-&gt;select(element|element.oclIsKindOf(sysml::SysMLPart))-&gt;asBag()&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;parts-&gt;collect(part|getParts(part))-&gt;flatten()-&gt;union(parts)&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;sysmlBaseModels:Bag(sysml::SysMLContainerPackage)=self.worksheet.mediniGetTracedElements(sysml::SysMLContainerPackage)-&gt;asBag()&#xD;&#xA;in&#x9;&#xD;&#xA;&#x9;if not sysmlBaseModels-&gt;isEmpty() then&#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;tracedParts:Bag(sysml::SysMLPart)= self.mediniGetTracedElements(sysml::SysMLPart)-&gt;asBag(),&#xD;&#xA;&#x9;&#x9;&#x9;MessageArg1: Bag(sysml::SysMLContainerPackage)= sysmlBaseModels&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;(not tracedParts-&gt;isEmpty()) and sysmlBaseModels-&gt;exists(model|&#xD;&#xA;&#x9;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parts:Set(sysml::SysMLPart)=getParts(model)&#xD;&#xA;&#x9;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;tracedParts-&gt;exists(part|parts-&gt;includes(part)))&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true -- worksheet is not derived = no problem&#xD;&#xA;&#x9;endif&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0018">
    <target xmi:id="_0z284TzFEeSh85v0OrcBCg" class="FMEA::Component"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_pKPW8DzcEeSPvpgulPWpSw" description="Checks if every function has an unique identifier" message="The ''{0}'' has no (unique) identifier" constraintExpression="inv:&#xD;&#xA;if self.typeCode ='function' then&#x9;&#xD;&#xA;&#x9;&#x9;if ((not self.id.oclIsUndefined()) and (self.id&lt;&gt;'')) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; sysml::SysMLActivity.allInstances()-&gt;one(element|element.typeCode ='function' and element.id = self.id)&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;false&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0034">
    <target xmi:id="_pKPW8TzcEeSPvpgulPWpSw" class="sysml::SysMLActivity"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_DvJuIDzfEeSPvpgulPWpSw" severity="WARNING" description="Checks that no decomposing requirement is allocated to the same system model or software element as its neighbor" message="The decomposing requirement {0} is allocated to the same system model or software element as its neighbor" constraintExpression="inv:&#xD;&#xA;if self.decomposingRequirement and self.container.oclIsKindOf(safetygoals::SafetyRequirement) then&#xD;&#xA;&#x9;let&#xD;&#xA;&#x9;&#x9;neighbors:Set(SafetyRequirement)= self.container.oclAsType(safetygoals::SafetyRequirement).getDecomposingRequirements(false,false)-&gt;excluding(self)-&gt;asSet()&#xD;&#xA;&#x9;in&#xD;&#xA;&#x9;&#x9;if neighbors-&gt;isEmpty() then&#xD;&#xA;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;selfSWElements:Bag(Structure::SimulinkNamedElement)=self.mediniGetTracedElements(Structure::SimulinkNamedElement)-&gt;asBag(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;selfHWElements:Bag(sysml::SysMLElement)=self.mediniGetTracedElements(sysml::SysMLElement)-&gt;asBag(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-- collect elements allocated to neighbors of self&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;swElements:Bag(Structure::SimulinkNamedElement)=neighbors-&gt;collect(element|element.mediniGetTracedElements(Structure::SimulinkNamedElement))-&gt;asBag(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;hwElements:Bag(sysml::SysMLElement)=neighbors-&gt;collect(element|element.mediniGetTracedElements(sysml::SysMLElement))-&gt;asBag()&#xD;&#xA;&#x9;&#x9;&#x9;in&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;selfSWElements-&gt;intersection(swElements)-&gt;isEmpty() and&#x9;selfHWElements-&gt;intersection(hwElements)-&gt;isEmpty()&#xD;&#xA;&#x9;&#x9;endif&#x9;&#x9;&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif&#xD;&#xA;" mediniIdentifier="0016">
    <target xmi:id="_DvJuITzfEeSPvpgulPWpSw" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_AkvVsDzhEeSPvpgulPWpSw" description="Checks that all system model elements have pendants in the derived FMEA worksheets" message="{0} has no corresponding component in the derived worksheet(s): {1}" constraintExpression="-- help methods&#xD;&#xA;def:&#xD;&#xA;&#x9;getSysMLModel(part:EUML::Generic::Kernel::UMLElement):SysMLContainerPackage&#xD;&#xA;&#x9;= &#x9;if part.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;part.oclAsType(SysMLContainerPackage) -- just return the ocl undefined&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;owner:EUML::Generic::Kernel::UMLElement= part.the_owner&#xD;&#xA;&#x9;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if owner.oclIsKindOf(SysMLContainerPackage) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;owner.oclAsType(SysMLContainerPackage)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;getSysMLModel(owner)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;def:&#xD;&#xA;&#x9;-- returns derived FMEA worksheets&#xD;&#xA;&#x9;getDerivedWorksheets(part:SysMLPart):Bag(FMEA::FMEAWorksheet)&#xD;&#xA;&#x9;= &#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;sysmlModel:SysMLContainerPackage= getSysMLModel(part)&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;if sysmlModel.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Bag{}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;sysmlModel.mediniGetTracedElements(FMEA::FMEAWorksheet)-&gt;asBag()&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;derivedWorksheets:Bag(FMEA::FMEAWorksheet)=getDerivedWorksheets(self)&#xD;&#xA;in&#x9;&#xD;&#xA;&#x9;if not derivedWorksheets-&gt;isEmpty() then&#xD;&#xA;&#x9;&#x9;let&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;tracedComponents:Sequence(FMEA::Component)= self.mediniGetTracedElements(FMEA::Component),&#xD;&#xA;&#x9;&#x9;&#x9;incompleteModels:Bag(FMEA::FMEAWorksheet)= derivedWorksheets-&gt;select(model|not (model.components-&gt;exists(component|tracedComponents-&gt;includes(component)))),&#xD;&#xA;&#x9;&#x9;&#x9;MessageArg1:Bag(FMEA::FMEAWorksheet)= incompleteModels&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;incompleteModels-&gt;isEmpty()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true -- no worksheet derived = no problem&#xD;&#xA;&#x9;endif&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0019">
    <target xmi:id="_AkvVsTzhEeSPvpgulPWpSw" class="sysml::SysMLPart"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_38-jwDziEeSPvpgulPWpSw" description="Checks for consistency between failure modes of FMEA components and related system model elements" message="{0} does not have the same failure modes than corresponding system model element(s): {1}" constraintExpression="inv:&#xD;&#xA; let&#xD;&#xA;&#x9;tracedParts:Sequence(sysml::SysMLPart)= self.mediniGetTracedElements(sysml::SysMLPart),&#xD;&#xA;&#x9;partsWithMissingFailureModes:Set(sysml::SysMLPart)= tracedParts-&gt;select(part|not(self.failureModes-&gt;collect(element|element.oclAsType(FMEA::PlainFailureMode)).name-&gt;forAll(cfm|part.failures-&gt;collect(element|element.oclAsType(safetyModel::FailureMode)).name-&gt;exists(pfm| cfm=pfm))))-&gt;asSet(),&#xD;&#xA;&#x9;partsWithAdditionalFailureModes:Set(sysml::SysMLPart)= tracedParts-&gt;select(part|not(part.failures-&gt;collect(element|element.oclAsType(safetyModel::FailureMode)).name-&gt;forAll(pfm|self.failureModes-&gt;collect(element|element.oclAsType(FMEA::PlainFailureMode)).name-&gt;exists(cfm| pfm=cfm))))-&gt;asSet(),&#xD;&#xA;&#x9;partsWithOtherFailureModes:Set(sysml::SysMLPart)= partsWithMissingFailureModes-&gt;union(partsWithAdditionalFailureModes)-&gt;asSet(),&#xD;&#xA;&#x9;MessageArg1:Set(sysml::SysMLPart)= partsWithOtherFailureModes&#xD;&#xA;in&#xD;&#xA;&#x9;partsWithOtherFailureModes-&gt;isEmpty()" mediniIdentifier="0020">
    <target xmi:id="_38-jwTziEeSPvpgulPWpSw" class="FMEA::Component"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_SqGtsDzjEeSPvpgulPWpSw" description="Checks for name consistency between failure modes" message="Name of {0} is different from related failure mode(s): {1}" constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;-- find all traces from/to failure modes&#x9;&#xD;&#xA;&#x9;failureModes:Set(FMEA::PlainFailureMode)= self.mediniGetTracedElements(FMEA::PlainFailureMode),&#xD;&#xA;&#x9;failureModesWithDifferentNames:Sequence(FMEA::PlainFailureMode)=failureModes-&gt;excluding(self)-&gt;select(element|element.oclAsType(FMEA::PlainFailureMode).name&lt;&gt;self.name)-&gt;asSequence(),&#xD;&#xA;&#x9;MessageArg1:Sequence(FMEA::PlainFailureMode)= failureModesWithDifferentNames&#xD;&#xA;in&#xD;&#xA;&#x9;failureModesWithDifferentNames-&gt;isEmpty()&#xD;&#xA;&#x9;" mediniIdentifier="0021">
    <target xmi:id="_SqGtsTzjEeSPvpgulPWpSw" class="FMEA::PlainFailureMode"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_1D6aADzkEeSPvpgulPWpSw" description="Checks that the failure rate of related failure modes is the same" message="Failure rate of {0} is not the same as failure rate of related failure mode(s): {1}" constraintExpression="inv:&#xD;&#xA;let&#xD;&#xA;&#x9;-- find all traces from/to failure modes&#xD;&#xA;&#x9;failureModes:Sequence(PlainFailureMode)=&#x9;self.mediniGetTracedElements(PlainFailureMode),&#xD;&#xA;&#x9;failureModesWithDifferentFailureRate:Sequence(PlainFailureMode)= failureModes-&gt;select(fm|fm.failureRate &lt;&gt; self.failureRate),&#xD;&#xA;&#x9;MessageArg1:Sequence(PlainFailureMode)= failureModesWithDifferentFailureRate&#xD;&#xA;in&#xD;&#xA;&#x9;failureModesWithDifferentFailureRate-&gt;isEmpty()&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0025">
    <target xmi:id="_1D6aATzkEeSPvpgulPWpSw" class="FMEA::PlainFailureMode"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_Ss8hsD1kEeSCh8n31EPaqg" severity="WARNING" description="Checks for events with failure rate 0.0" message="The ''{0}'' has failure rate 0.0" constraintExpression="inv:&#xD;&#xA;if not self.probabilityData.oclIsUndefined() then&#xD;&#xA;&#x9;-- probability is derived&#xD;&#xA;&#x9;if self.probabilityData.oclIsKindOf(FTA::TimeDependentProbabilityModel) then&#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;data:FTA::TimeDependentProbabilityModel = self.probabilityData.oclAsType(FTA::TimeDependentProbabilityModel)&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;if data.lambdaDerived then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-- check failure rate provider&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if self.represents.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if self.represents.oclIsKindOf(sysml::SysMLElement) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.represents.oclAsType(sysml::SysMLElement).failureRate&lt;&gt;0.0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.represents.oclIsKindOf(FMEA::PlainFailureMode) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.represents.oclAsType(FMEA::PlainFailureMode).failureRate&lt;&gt;0.0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.represents.oclIsKindOf(safetyModel::FailureMode) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.represents.oclAsType(safetyModel::FailureMode).failureRate&lt;&gt;0.0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;data.lambda&lt;&gt;0.0&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0044">
    <target xmi:id="_Ss8hsT1kEeSCh8n31EPaqg" class="FTA::Event"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_8YEKUD4nEeSs4apV8vzRDg" description="Checks if sub requirements have the same or higher ASIL than of its parent" message="{0} Has an invalid ASIL. ASIL of sub requirement  has to be the same or higher than of its parent" constraintExpression="def: isD(asil : String): Boolean = asil.trim().matches('D(\\((D)\\))?')&#xD;&#xA;def: isC(asil : String): Boolean = asil.trim().matches('C(\\((C|D)\\))?')&#xD;&#xA;def: isQM(asil : String): Boolean = asil.trim().matches('QM(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isA(asil : String): Boolean = asil.trim().matches('A(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isB(asil : String): Boolean = asil.trim().matches('B(\\((B|C|D)\\))?')&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;parent:safetygoals::SafetyRequirement=self.container&#xD;&#xA;in&#xD;&#xA;&#x9;if not self.decomposingRequirement and not parent.oclIsUndefined() and parent.oclIsKindOf(SafetyRequirement) then&#xD;&#xA;&#x9;&#x9;&#x9;((isD(parent.oclAsType(SafetyRequirement).asil)) implies (isD(self.asil)))&#xD;&#xA;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;((isC(parent.oclAsType(SafetyRequirement).asil)) implies ((isC(self.asil)) or (isD(self.asil))))&#xD;&#xA;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;((isB(parent.oclAsType(SafetyRequirement).asil)) implies ((not isA(self.asil)) and (not isQM(self.asil))))&#xD;&#xA;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;((isA(parent.oclAsType(SafetyRequirement).asil)) implies ((not isQM(self.asil))))&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0030">
    <target xmi:id="_8YEKUT4nEeSs4apV8vzRDg" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_a33fMD4pEeSs4apV8vzRDg" description="Checks if safety requirements have the same or higher ASIL than of goals they contribute to" message="{0} Has an invalid ASIL. ASIL has to be the same or higher than of goals it contributes to" constraintExpression="def: isQM(asil : String): Boolean = asil.trim().matches('QM(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isA(asil : String): Boolean = asil.trim().matches('A(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isC(asil : String): Boolean = asil.trim().matches('C(\\((C|D)\\))?')&#xD;&#xA;def: isD(asil : String): Boolean = asil.trim().matches('D(\\((D)\\))?')&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;goalContributions:Set(goal::Relation)=self.sourceRelations-&gt;select(rel| rel.oclIsKindOf(SafetyReqRelation) and rel.oclAsType(SafetyReqRelation).kind = SafetyReqRelationKind::UNSPECIFIED and rel.target.oclIsKindOf(SafetyGoal)),&#xD;&#xA;&#x9;targets:Bag(SafetyGoal)= goalContributions-&gt;collect(rel| rel.target)&#xD;&#xA;in&#xD;&#xA;&#x9;targets-&gt;forAll(target|&#x9;((target.asil='D') implies (isD(self.asil)))&#xD;&#xA;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;((target.asil= 'C') implies ((isC(self.asil)) or (isD(self.asil))))&#xD;&#xA;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;((target.asil= 'B') implies ((not isA(self.asil)) and (not isQM(self.asil))))&#xD;&#xA;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;((target.asil= 'A') implies ((not isQM(self.asil))))&#xD;&#xA;&#x9;)&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0014">
    <target xmi:id="_a33fMT4pEeSs4apV8vzRDg" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_9tU60D4sEeSs4apV8vzRDg" description="Checks that for every checked task in a checklist a reviewer is set." message="There is a checked task in checklist {1} which misses a reviewer." constraintExpression="-- determine the checklist&#xD;&#xA;def: getChecklist(item:ChecklistItem):Checklist&#xD;&#xA;&#x9;= if item.eContainer().oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;null -- not in a resource&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;if item.eContainer().oclIsKindOf(Checklist) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;item.eContainer().oclAsType(Checklist) -- found the containing checklist&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if item.eContainer().oclIsKindOf(ChecklistItem) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;getChecklist(item.eContainer().oclAsType(ChecklistItem))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;null  -- unknown container type&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;checklist:Checklist = getChecklist(self),&#xD;&#xA;&#x9;MessageArg1:String = if checklist.oclIsUndefined() then 'unknown' else checklist.name endif&#xD;&#xA;in&#xD;&#xA;if (self.checked) then&#xD;&#xA;&#x9;not (self.checkedBy.oclIsUndefined()) and not (self.checkedBy.trim().isEmpty())&#xD;&#xA;else &#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0026">
    <target xmi:id="_9tU60T4sEeSs4apV8vzRDg" class="checklist::ChecklistItem"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_HS6fkD4uEeSs4apV8vzRDg" description="Checks if a valid decomposition has been applied (ISO 26262-9 5.4.10)" message="{0} is not correctly decomposed" constraintExpression="def: isQM(asil : String): Boolean = asil.trim().matches('QM(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isA(asil : String): Boolean = asil.trim().matches('A(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isB(asil : String): Boolean = asil.trim().matches('B(\\((B|C|D)\\))?')&#xD;&#xA;def: isC(asil : String): Boolean = asil.trim().matches('C(\\((C|D)\\))?')&#xD;&#xA;def: isD(asil : String): Boolean = asil.trim().matches('D(\\((D)\\))?')&#xD;&#xA;&#xD;&#xA;def: isLower(first : String,second: String): Boolean =&#xD;&#xA;&#x9;( (first = 'D') implies (false) ) and&#xD;&#xA;&#x9;( (first = 'C') implies (second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'B') implies (second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'A') implies (second = 'B' or second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'QM') implies (second = 'A' or second = 'B' or second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'NONE') implies (true) )&#xD;&#xA;&#xD;&#xA;def: isHigherOrEqual(first: String, second: String): Boolean =&#xD;&#xA;&#x9;&#x9;( (first = second) or ( isLower(second,first) ) )&#xD;&#xA;def: getAsilContext(asil : String): String = if&#xD;&#xA;&#x9;asil.trim().matches('QM\\((A|B|C|D)\\)') then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(4,4)&#xD;&#xA;&#x9;else if asil.trim().matches('A\\((A|B|C|D)\\)') or asil.trim().matches('B\\((B|C|D)\\)') or asil.trim().matches('C\\((C|D)\\)') or asil.trim().matches('D\\((D)\\)') then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(3,3)&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'NONE'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;decompositions:Bag(SafetyRequirement)= self.getDecomposingRequirements(false,false)-&gt;asBag(), &#xD;&#xA;&#x9;number:Integer=decompositions-&gt;size()&#xD;&#xA;in&#xD;&#xA;&#x9;if number = 0 then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else if number = 2 then&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;asils:Bag(String)=decompositions-&gt;collect(a|a.asil),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;notAll_QM:Boolean= not asils-&gt;forAll(a| isQM(a)),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;notAll_A:Boolean= not asils-&gt;forAll(a|isA(a)),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;notA_and_QM:Boolean= not (asils-&gt;one(a|isQM(a)) and asils-&gt;one(a|isA(a))),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;notB_and_QM:Boolean= not (asils-&gt;one(a|isQM(a)) and asils-&gt;one(a|isB(a))),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;notC_and_QM:Boolean= not (asils-&gt;one(a|isQM(a)) and asils-&gt;one(a|isC(a))),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;notB_and_A:Boolean= not (asils-&gt;one(a|isB(a)) and asils-&gt;one(a|isA(a))),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;asilContext:String = getAsilContext(self.asil)&#xD;&#xA;&#x9;&#x9;&#x9;in --check ASIL decompositions rules&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(isA(self.asil) implies&#x9;(notAll_QM))&#xD;&#xA;&#x9;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(isB(self.asil) implies&#x9;(notAll_QM and notA_and_QM))&#xD;&#xA;&#x9;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(isC(self.asil) implies (notAll_QM and notA_and_QM and notB_and_QM and notAll_A))&#xD;&#xA;&#x9;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(isD(self.asil) implies (notAll_QM and notA_and_QM and notB_and_QM and notAll_A and notC_and_QM and notB_and_A))&#xD;&#xA;&#x9;&#x9;&#x9;and if (not (asilContext = 'NONE')) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;asils-&gt;forAll(asil | isHigherOrEqual(getAsilContext(asil),asilContext) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;asils-&gt;forAll(asil | isHigherOrEqual(getAsilContext(asil),self.asil) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;" mediniIdentifier="0009">
    <target xmi:id="_HS7GoD4uEeSs4apV8vzRDg" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_rJBnQD4uEeSs4apV8vzRDg" severity="WARNING" description="Checks that decomposition does not increase ASIL" message="Decompositions of {0} increase ASIL" constraintExpression="def: isQM(asil : String): Boolean = asil.trim().matches('QM(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isA(asil : String): Boolean = asil.trim().matches('A(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isB(asil : String): Boolean = asil.trim().matches('B(\\((B|C|D)\\))?')&#xD;&#xA;def: isC(asil : String): Boolean = asil.trim().matches('C(\\((C|D)\\))?')&#xD;&#xA;def: isD(asil : String): Boolean = asil.trim().matches('D(\\((D)\\))?')&#xD;&#xA;def: getAsilContext(asil : String): String = if&#xD;&#xA;&#x9;asil.trim().matches('QM\\((A|B|C|D)\\)') then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(4,4)&#xD;&#xA;&#x9;else if asil.trim().matches('A\\((A|B|C|D)\\)') or asil.trim().matches('B\\((B|C|D)\\)') or asil.trim().matches('C\\((C|D)\\)') or asil.trim().matches('D\\((D)\\)') then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(3,3)&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'NONE'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;def: isLower(first : String,second: String): Boolean =&#xD;&#xA;&#x9;( (first = 'D') implies (false) ) and&#xD;&#xA;&#x9;( (first = 'C') implies (second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'B') implies (second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'A') implies (second = 'B' or second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'QM') implies (second = 'A' or second = 'B' or second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'NONE') implies (true) )&#xD;&#xA;&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;decompositions:Bag(SafetyRequirement)= self.getDecomposingRequirements(false,false)-&gt;asBag(), &#xD;&#xA;&#x9;number:Integer=decompositions-&gt;size(),&#xD;&#xA;&#x9;asils:Bag(String)=decompositions-&gt;collect(a|a.asil),&#xD;&#xA;&#x9;asilContext:String = getAsilContext(self.asil)&#xD;&#xA;in&#xD;&#xA;&#x9;if number = 1 or number = 2 then&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;( ( isQM(self.asil) ) implies ( asils-&gt;forAll(asil|isQM(asil)) ) )&#xD;&#xA;&#x9;&#x9;and &#xD;&#xA;&#x9;&#x9;&#x9;( ( isA(self.asil) ) implies ( (asils-&gt;one(asil|isA(asil)) or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;asils-&gt;exists(asil|isQM(asil)))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and not asils-&gt;exists(asil|isB(asil) or isC(asil) or isD(asil)) ) )&#xD;&#xA;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;( ( isB(self.asil) ) implies ( ((asils-&gt;one(asil|isB(asil)) xor asils-&gt;exists(asil|isA(asil))) or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;asils-&gt;exists(asil|isQM(asil)))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and not asils-&gt;exists(asil|isC(asil) or isD(asil)) ) )&#xD;&#xA;&#x9;&#x9;and&#xD;&#xA;&#x9;&#x9;&#x9;( ( isC(self.asil) ) implies ( ((asils-&gt;one(asil|isC(asil)) xor (asils-&gt;one(asil|isB(asil)) or asils-&gt;exists(asil|isA(asil)))) or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;asils-&gt;exists(asil|isQM(asil)))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and not asils-&gt;exists(asil|isD(asil)) ) )&#xD;&#xA;&#x9;&#x9;and ( ( isD(self.asil) ) implies ( (asils-&gt;one(asil|isD(asil)) xor asils-&gt;one(asil|isC(asil) or isB(asil) or isA(asil))) or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(asils-&gt;forAll(asil|isB(asil))) or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(asils-&gt;exists(asil|isA(asil)) and not asils-&gt;exists(asil|isD(asil))) or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;asils-&gt;exists(asil|isQM(asil)) ) )&#xD;&#xA;&#x9;&#x9;and ( if not( asilContext = 'NONE' ) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; asils-&gt;forAll(asil| (asilContext = getAsilContext(asil)) or (isLower(getAsilContext(asil),asilContext))  ) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; asils-&gt;forAll(asil| (self.asil = getAsilContext(asil)) or (isLower(getAsilContext(asil),self.asil)) )  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true -- does not check general decomposition rules &#xD;&#xA;&#x9;endif&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0022">
    <target xmi:id="_rJBnQT4uEeSs4apV8vzRDg" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_CLY9YD40EeSs4apV8vzRDg" description="Checks that classification of severity (ISO 26262-3 7.4.3.2), exposure (ISO 26262-3 7.4.3.4) and controllability (ISO 26262-3 7.4.3.7) have a justifications given" message="{0} has no justification given for the estimated classification of: {1}" constraintExpression="--util to append &#xD;&#xA;def:&#xD;&#xA;&#x9;append(value:String, suffix: String):String&#xD;&#xA;&#x9;=&#x9;if value&lt;&gt;'' then&#xD;&#xA;&#x9;&#x9;&#x9;if suffix&lt;&gt;'' then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;value .concat( ', ').concat(suffix)&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;value&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;suffix&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#xD;&#xA;-- util to check comment&#x9;&#xD;&#xA;def:&#xD;&#xA;&#x9;check(comment:String, message:String):String&#xD;&#xA;&#x9;=&#x9;if comment.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;message&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;if comment.trim()='' then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;message&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;asil:hazard::IsoAsil = self.isoAsil,&#xD;&#xA;&#x9;val1:String= check(asil.severityComment, 'severity'),&#xD;&#xA;&#x9;val2:String =append(val1,if asil.exposureComment.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;check(self.operationalSituation.defaultExposureComment, 'exposure')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if asil.exposureComment.trim()='' then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;check(self.operationalSituation.defaultExposureComment, 'exposure')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif),&#xD;&#xA;&#x9;MessageArg1:String= append(val2,check(asil.controllabilityComment, 'controllability'))&#xD;&#xA;in&#xD;&#xA;&#x9;if not asil.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;MessageArg1=''&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0010">
    <target xmi:id="_CLY9YT40EeSs4apV8vzRDg" class="hazard::HazardousEvent"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_6PcbcD7sEeSwDYmFvl1UdA" description="Checks that failure modes have unique names within the same scope" message="The ''{0}'' has no unique name" constraintExpression="def: uniqueFailureModeName(failure:FMEA::PlainFailureMode):Boolean = &#xD;&#xA;-- apply to failure modes that have a name set only&#xD;&#xA;if ((not failure.name.oclIsUndefined()) and (failure.name &lt;&gt; '')) then&#xD;&#xA;&#x9;-- apply to failure modes in detached FMEA sheets&#xD;&#xA;&#x9;if (failure.mediniGetContainer().oclIsKindOf(FMEA::Component)) then&#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;container:FMEA::Component = self.mediniGetContainer().oclAsType(FMEA::Component)&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;-- there must be only one failure mode with that name&#xD;&#xA;&#x9;&#x9;&#x9;container.failureModes-&gt;one(element|&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if element.oclIsKindOf(FMEA::PlainFailureMode) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element.oclAsType(FMEA::PlainFailureMode).name = failure.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif&#xD;&#xA;&#xD;&#xA;def: uniqueFailureModeName(failure:safetyModel::FailureMode):Boolean = &#xD;&#xA;-- apply to failure modes that have a name set only&#xD;&#xA;if ((not failure.name.oclIsUndefined()) and (failure.name &lt;&gt; '')) then&#xD;&#xA;&#x9;-- apply to failure modes in SysMLelements containers&#xD;&#xA;&#x9;if (failure.mediniGetContainer().oclIsKindOf(sysml::SysMLElement)) then&#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;container :sysml::SysMLElement= failure.mediniGetContainer().oclAsType(sysml::SysMLElement)&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;-- there must be only one failure mode with that name&#xD;&#xA;&#x9;&#x9;&#x9;container.failures-&gt;one(element|element.name = failure.name)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif&#xD;&#xA;&#xD;&#xA;inv:&#xD;&#xA;if self.oclIsKindOf(FMEA::PlainFailureMode) then&#xD;&#xA;&#x9;-- failure mode in detached FMEA&#xD;&#xA;&#x9;uniqueFailureModeName(self.oclAsType(FMEA::PlainFailureMode))&#xD;&#xA;else if self.element.oclIsKindOf(safetyModel::FailureMode) then&#xD;&#xA;&#x9;&#x9;-- failure mode refered from derived FMEA&#xD;&#xA;&#x9;&#x9;uniqueFailureModeName(self.element.oclAsType(safetyModel::FailureMode))&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#x9;&#x9;&#xD;&#xA;&#x9;endif&#xD;&#xA;endif&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0041">
    <target xmi:id="_6PcbcT7sEeSwDYmFvl1UdA" class="FMEA::FailureEntry"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_oXrM4EMDEeSAKYEqz6LV0w" description="Checks if safety requirements have the same or higher ASIL than of requirements they contribute, also as independency argument, to" message="{0} has an invalid ASIL. ASIL has to be the same or higher than of requirement(s): {1}" constraintExpression="def: isQM(asil : String): Boolean = asil.trim().matches('QM(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isA(asil : String): Boolean = asil.trim().matches('A(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isB(asil : String): Boolean = asil.trim().matches('B(\\((B|C|D)\\))?')&#xD;&#xA;def: isC(asil : String): Boolean = asil.trim().matches('C(\\((C|D)\\))?')&#xD;&#xA;def: isD(asil : String): Boolean = asil.trim().matches('D(\\((D)\\))?')&#xD;&#xA;&#xD;&#xA;-- this function returns the asil context ; example ;QM(A) returns A, B(D) returns D&#xD;&#xA;def: getAsilContext(asil : String): String = if&#xD;&#xA;&#x9;asil.trim().matches('QM\\((A|B|C|D)\\)') then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(4,4)&#xD;&#xA;&#x9;else if ( asil.trim().matches('A\\((A|B|C|D)\\)') or asil.trim().matches('B\\((B|C|D)\\)') or asil.trim().matches('C\\((C|D)\\)') or asil.trim().matches('D\\((D)\\)') ) then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(3,3)&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'NONE'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;&#xD;&#xA;-- this function checks which asil is lower ;if first is lower it returns true&#xD;&#xA;def: isLower(first : String,second: String): Boolean =&#xD;&#xA;&#x9;( (first = 'D') implies (false) ) and&#xD;&#xA;&#x9;( (first = 'C') implies (second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'B') implies (second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'A') implies (second = 'B' or second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'QM') implies (second = 'A' or second = 'B' or second = 'C' or second = 'D') ) and&#xD;&#xA;&#x9;( (first = 'NONE') implies (second = 'A' or second = 'B' or second = 'C' or second = 'D' or second='QM') )&#xD;&#xA;&#x9;&#xD;&#xA;-- this function is resturns first asil example; QM(B) returns QM, A(D) return A&#xD;&#xA;def: getRawAsil(asil : String): String = if&#xD;&#xA;&#x9;asil.trim().matches('QM\\((A|B|C|D)\\)') then&#xD;&#xA;&#x9;&#x9;'QM'&#xD;&#xA;&#x9;else if ( asil.trim().matches('A\\((A|B|C|D)\\)') or asil.trim().matches('B\\((B|C|D)\\)') or asil.trim().matches('C\\((C|D)\\)') or asil.trim().matches('D\\((D)\\)') ) then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(1,1)&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'NONE'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;&#xD;&#xA;def: hasSameRawAsil(first : String,second:String): Boolean =&#xD;&#xA;&#x9;if ( getRawAsil(first)=getRawAsil(second))then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;&#xD;&#xA;-- this function is checking val matches with any of these combinations  QM(A|B|C|D) or A(A|B|C|D) or B(B|C|D) or  C(C|D) or D(D)&#xD;&#xA;def:isContextAsil(val:String):Boolean = if (val.trim().matches('QM\\((A|B|C|D)\\)') or val.trim().matches('A\\((A|B|C|D)\\)') or val.trim().matches('B\\((B|C|D)\\)') or val.trim().matches('C\\((C|D)\\)') or val.trim().matches('D\\((D)\\)') ) then&#xD;&#xA;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;false&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#xD;&#xA;-- checking asil is lower for source or target with context combinations; example ( QM(B),A(B) ) or ( D, A(B) )&#xD;&#xA;def: isLowerWithContext(source:String,target:String):Boolean=&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(isContextAsil(source)) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(isContextAsil(target)) then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(hasSameRawAsil(source,target)) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isLower(getAsilContext(source),getAsilContext(target))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isLower(getRawAsil(source),getRawAsil(target))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isLower(getRawAsil(source),target)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(isContextAsil(target)) then&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not isLower(getRawAsil(target),source)&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isLower(source,target)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;reqContributions:Bag(entities::Relation)=self.sourceRelations-&gt;select(rel| rel.oclIsKindOf(SafetyReqRelation) and (rel.oclAsType(SafetyReqRelation).kind = SafetyReqRelationKind::UNSPECIFIED or rel.oclAsType(SafetyReqRelation).kind = SafetyReqRelationKind::INDEPENDENCY) and rel.target.oclIsKindOf(SafetyRequirement)),&#xD;&#xA;&#x9;targets:Bag(SafetyRequirement)= reqContributions-&gt;collect(rel| rel.target),&#x9;&#x9;&#xD;&#xA;&#x9;MessageArg1:Bag(SafetyRequirement)= targets-&gt;select(target| isLowerWithContext(self.asil,target.asil) )&#xD;&#xA;in&#xD;&#xA;MessageArg1-&gt;isEmpty()&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0029">
    <target xmi:id="_oXrM4UMDEeSAKYEqz6LV0w" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_oVssIEOhEeSdDqLFu3Q_pg" severity="WARNING" description="Checks that contribution does not increase ASIL" message="{0} increases ASIL. ASIL should be the same than of requirement(s): {1}" constraintExpression="def: isQM(asil : String): Boolean = asil.trim().matches('QM(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isA(asil : String): Boolean = asil.trim().matches('A(\\((A|B|C|D)\\))?')&#xD;&#xA;def: isB(asil : String): Boolean = asil.trim().matches('B(\\((B|C|D)\\))?')&#xD;&#xA;def: isC(asil : String): Boolean = asil.trim().matches('C(\\((C|D)\\))?')&#xD;&#xA;def: isD(asil : String): Boolean = asil.trim().matches('D(\\((D)\\))?')&#xD;&#xA;&#xD;&#xA;-- this function returns the asil context ; example ;QM(A) returns A, B(D) returns D&#xD;&#xA;def: getAsilContext(asil : String): String = if&#xD;&#xA;&#x9;asil.trim().matches('QM\\((A|B|C|D)\\)') then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(4,4)&#xD;&#xA;&#x9;else if ( asil.trim().matches('A\\((A|B|C|D)\\)') or asil.trim().matches('B\\((B|C|D)\\)') or asil.trim().matches('C\\((C|D)\\)') or asil.trim().matches('D\\((D)\\)') ) then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(3,3)&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'NONE'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;&#xD;&#xA;-- this function checks which asil is lower ;if first is lower it returns true&#xD;&#xA;def: isHigher(first : String,second: String): Boolean =&#xD;&#xA;( (first = 'D') implies (second = 'C' or second = 'B' or second = 'A'  or second = 'QM' or second = 'NONE') ) and&#xD;&#xA;( (first = 'C') implies ( second = 'B' or second = 'A'  or second = 'QM' or second = 'NONE') ) and&#xD;&#xA;( (first = 'B') implies ( second = 'A'  or second = 'QM' or second = 'NONE') ) and&#xD;&#xA;( (first = 'A') implies ( second = 'QM' or second = 'NONE') ) and&#xD;&#xA;( (first = 'QM') implies ( second = 'NONE') ) and&#xD;&#xA;( (first = 'NONE') implies  false)&#x9;&#xD;&#xA;&#x9;&#xD;&#xA;-- this function is resturns first asil example; QM(B) returns QM, A(D) return A&#xD;&#xA;def: getRawAsil(asil : String): String = if&#xD;&#xA;&#x9;asil.trim().matches('QM\\((A|B|C|D)\\)') then&#xD;&#xA;&#x9;&#x9;'QM'&#xD;&#xA;&#x9;else if ( asil.trim().matches('A\\((A|B|C|D)\\)') or asil.trim().matches('B\\((B|C|D)\\)') or asil.trim().matches('C\\((C|D)\\)') or asil.trim().matches('D\\((D)\\)') ) then&#xD;&#xA;&#x9;&#x9;&#x9;asil.trim().substring(1,1)&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;'NONE'&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;&#xD;&#xA;def: hasSameRawContext(first : String,second:String): Boolean =&#xD;&#xA;&#x9;if ( getRawAsil(first)=getRawAsil(second))then&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;&#xD;&#xA;-- this function is checking val matches with any of these combinations  QM(A|B|C|D) or A(A|B|C|D) or B(B|C|D) or  C(C|D) or D(D)&#xD;&#xA;def:isConextAsil(val:String):Boolean = if (val.trim().matches('QM\\((A|B|C|D)\\)') or val.trim().matches('A\\((A|B|C|D)\\)') or val.trim().matches('B\\((B|C|D)\\)') or val.trim().matches('C\\((C|D)\\)') or val.trim().matches('D\\((D)\\)') ) then&#xD;&#xA;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;false&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#xD;&#xA;-- checking asil is lower for source or target with context combinations; example ( QM(B),A(B) ) or ( D, A(B) )&#xD;&#xA;def: isASILIncreased(source:String,target:String):Boolean=&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(isConextAsil(source)) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(isConextAsil(target)) then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(hasSameRawContext( source,target)) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isHigher(getAsilContext(source),getAsilContext(target))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if&#x9;isHigher(getRawAsil(source),getRawAsil(target)) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;isHigher(getAsilContext(source),getAsilContext(target))&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;endif&#x9;&#x9;&#x9;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isHigher(getAsilContext(source),target)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(isConextAsil(target)) then&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isHigher(source,getAsilContext(target))&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isHigher(source,target)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;reqContributions:Bag(entities::Relation)=self.sourceRelations-&gt;select(rel| rel.oclIsKindOf(SafetyReqRelation) and (rel.oclAsType(SafetyReqRelation).kind = SafetyReqRelationKind::UNSPECIFIED or rel.oclAsType(SafetyReqRelation).kind = SafetyReqRelationKind::INDEPENDENCY) and rel.target.oclIsKindOf(SafetyRequirement)),&#xD;&#xA;&#x9;targets:Bag(SafetyRequirement)= reqContributions-&gt;collect(rel| rel.target),&#x9;&#x9;&#xD;&#xA;&#x9;MessageArg1:Bag(SafetyRequirement)= targets-&gt;select(target|  isASILIncreased(self.asil,target.asil) )&#xD;&#xA;in&#xD;&#xA;MessageArg1-&gt;isEmpty()&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" mediniIdentifier="0052">
    <target xmi:id="_oVssIUOhEeSdDqLFu3Q_pg" class="safetygoals::SafetyRequirement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_7E0qoEPWEeS3XMTe1sOY0g" description="Checks that either all failure modes of a FMEDA component have category 'no part' or none" message="{0} has failure mode with category 'no part' and failure modes with other categories." constraintExpression="inv:&#xD;&#xA;if self.failureModes-&gt;isEmpty() then&#xD;&#xA; &#x9;true&#xD;&#xA;else&#xD;&#xA; &#x9;if self.oclIsTypeOf(FMEA::Component) then -- detached FMEA&#xD;&#xA;&#x9;&#x9;-- either all or no failure mode with category 'no part'&#xD;&#xA; &#x9;&#x9;if self.failureModes-&gt;exists(fm|fm.oclAsType(FMEA::PlainFailureMode).failureCategory = safetyModel::FailureCategory::NoPart) then &#xD;&#xA;&#x9; &#x9;&#x9;self.failureModes-&gt;forAll(fm| fm.oclAsType(FMEA::PlainFailureMode).failureCategory  = safetyModel::FailureCategory::NoPart)&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;endif &#xD;&#xA;&#x9;else -- derived FMEA&#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;-- only interested in failure modes&#xD;&#xA;&#x9;&#x9;&#x9;effectiveFailureModes:Sequence(safetyModel::FailureMode) =  self.failureModes-&gt;select(entry|entry.element.oclIsKindOf(safetyModel::FailureMode))-&gt;collect(entry|entry.element.oclAsType(safetyModel::FailureMode))&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;-- either all or no failure mode with category 'no part'&#xD;&#xA;&#x9;&#x9;&#x9;if effectiveFailureModes-&gt;exists(fm|fm.failureCategory = safetyModel::FailureCategory::NoPart) then&#xD;&#xA;&#x9; &#x9;&#x9;&#x9;effectiveFailureModes-&gt;forAll(fm|fm.failureCategory  = safetyModel::FailureCategory::NoPart)&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;true&#xD;&#xA;&#x9;&#x9;&#x9;endif &#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;endif&#xD;&#xA;" mediniIdentifier="0011">
    <target xmi:id="_7E0qoUPWEeS3XMTe1sOY0g" class="FMEA::ComponentEntry"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_T7PfgGEAEeSfV6Kluy8mUA" severity="WARNING" description="Checks whether there are events with the same id." message="There are events with same id as ''{0}''." constraintExpression="inv:&#xD;&#xA;-- ignore all events in Analysis model&#xD;&#xA;if (not self.id.oclIsUndefined() and (self.id&lt;&gt;'')) and ( not self.eContainer().oclIsKindOf(AnalysisModel))    then&#xD;&#xA; &#x9;FTA::EventNode.allInstances()-&gt;select(event|not event.eContainer().oclIsKindOf(AnalysisModel))-&gt;select(event|event.id=self.id).event-&gt;asSet()-&gt;size()&lt;=1&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif" mediniIdentifier="0031">
    <target xmi:id="_T7PfgWEAEeSfV6Kluy8mUA" class="FTA::EventNode"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_V3czUJQ3EeWjAtb08e9adw" description="Checks that all hardware metrics worksheets which calculate individual metrics have at least one safety goal assigned" message="''{0}'' calculates individual metrics but has no goal assigned" constraintExpression="inv:&#xD;&#xA;(not self.individualMetrics) or (self.safetyGoal-&gt;notEmpty())" mediniIdentifier="0053">
    <target xmi:id="_V3czUZQ3EeWjAtb08e9adw" class="dc::DCWorksheet"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_XHyZ0JQ3EeWjAtb08e9adw" description="Checks that sibling failure entries for the same failure modes have disjoint evaluated goal selections" message="''{0}'' has safety goals selected for evaluation which are also selected for sibling for same failure mode" constraintExpression="-- returns all siblings for the same element (including self)&#xD;&#xA;def: getSiblings(): Collection(dc::DCFailureModeEntry)&#xD;&#xA;&#x9;= self.component.failureModes-&gt;select(fe|fe.oclIsKindOf(dc::DCFailureModeEntry) and fe.element = self.element)-&gt;collect(fe|fe.oclAsType(dc::DCFailureModeEntry))&#xD;&#xA;&#xD;&#xA;inv:&#xD;&#xA;&#x9;-- selected goals must be disjoint, empty selection means all&#xD;&#xA;&#x9;getSiblings()-&gt;forAll(first, second|(first &lt;&gt; second) implies (&#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;firstSelectedGoals:Set(ecore::EObject) = first.evaluatedFor,&#xD;&#xA;&#x9;&#x9;&#x9;secondSelectedGoals:Set(ecore::EObject) = second.evaluatedFor&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;firstSelectedGoals-&gt;notEmpty() and secondSelectedGoals-&gt;notEmpty() and firstSelectedGoals-&gt;intersection(secondSelectedGoals)-&gt;isEmpty()&#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9;)" mediniIdentifier="0054">
    <target xmi:id="_XHyZ0ZQ3EeWjAtb08e9adw" class="dc::DCFailureModeEntry"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_YO5y4JQ3EeWjAtb08e9adw" description="Checks that component entries are marked as safety related only for safety goals the worksheet is analyzing" message="''{0}'' is safety related for safety goals which are not configured for the hardware metrics worksheet" constraintExpression="inv:&#xD;&#xA;&#x9;self.safetyRelated or self.worksheet.oclAsType(dc::DCWorksheet).safetyGoal-&gt;includesAll(self.safetyRelatedFor)" mediniIdentifier="0055">
    <target xmi:id="_YO5y4ZQ3EeWjAtb08e9adw" class="dc::DCComponentEntry"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_ZHlHUJQ3EeWjAtb08e9adw" description="Checks that failure entries are evaluated only for safety goals the component is safety related for" message="''{0}'' is evaluated for safety goals which are not configured safety related for the component" constraintExpression="inv:&#xD;&#xA;&#x9;self.evaluatedFor-&gt;isEmpty() or &#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;component:dc::DCComponentEntry = self.component.oclAsType(dc::DCComponentEntry)&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;if component.safetyRelated then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;component.worksheet.oclAsType(dc::DCWorksheet).safetyGoal-&gt;includesAll(self.evaluatedFor)&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;component.safetyRelatedFor-&gt;includesAll(self.evaluatedFor)&#xD;&#xA;&#x9;&#x9;&#x9;endif" mediniIdentifier="0056">
    <target xmi:id="_ZHlHUZQ3EeWjAtb08e9adw" class="dc::DCFailureModeEntry"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_OxBEoJUSEeWHrP3G-n24_w" description="Checks that failure entries have only safety mechanisms selected which are also configured for the corresponding failure mode" message="''{0}'' has safety mechanisms selected which are not configured for the corresponding failure mode" constraintExpression="inv:&#xD;&#xA;&#x9;&#x9;self.element.oclAsType(safetyModel::FailureMode).spfSafetyMechanisms-&gt;includesAll(self.spfSafetyMechanisms)&#xD;&#xA;&#x9;and&#xD;&#xA;&#x9;&#x9;self.element.oclAsType(safetyModel::FailureMode).mpfSafetyMechanisms-&gt;includesAll(self.lmpfSafetyMechanisms)" mediniIdentifier="0057">
    <target xmi:id="_OxBEoZUSEeWHrP3G-n24_w" class="dc::DCFailureModeEntry"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_8q0BsH2wEeeVLL-noUH-cA" description="Checks that failure rate distributions add to 100.0% for each system model element" message="The failure rate distribution percentages for the failure modes of {0} do not add to 100.0%. Value is: {1}" constraintExpression="inv:&#xD;&#xA;if self.oclIsTypeOf(sysml::SysMLPart) or self.oclIsTypeOf(sysml::SysMLFlowPort) or self.oclIsTypeOf(sysml::SysMLFlowPortUsage) or self.oclIsTypeOf(sysml::SysMLBlock) then&#xD;&#xA;&#x9;let&#xD;&#xA;&#x9;&#x9;permanentFailures:Bag(safetyModel::FailureMode) = self.failures-&gt;collect(f|f.oclAsType(safetyModel::FailureMode))-&gt;select(f:safetyModel::FailureMode|f.failureType = safetyModel::FailureType::PERMANENT)&#xD;&#xA;&#x9;in&#xD;&#xA;&#x9;if not permanentFailures-&gt;isEmpty() and self.failureRateMode &lt;&gt; safetyModel::FailureRateMode::FROM_FAILURE_MODES then&#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9; total :Real =permanentFailures.failureRateDistribution-&gt;iterate(p:Real; sum:Real=0.0|sum+p),&#xD;&#xA;&#x9; &#x9; var :Real = 100 - total,&#x9;&#xD;&#xA;&#x9;&#x9; MessageArg1 :Real = &#xD;&#xA;&#x9; &#x9;&#x9;if  var.abs() &lt;= 0.00001  then&#xD;&#xA;&#x9;&#x9;  &#x9;&#x9;100&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;    total&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;MessageArg1=100.0&#x9;&#x9;&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;else&#xD;&#xA;true&#xD;&#xA;endif" mediniIdentifier="0024">
    <target xmi:id="_8q0BsX2wEeeVLL-noUH-cA" class="sysml::SysMLElement"/>
  </OCLConstraints:Constraint>
  <OCLConstraints:Constraint xmi:id="_e6bQMH2yEeeVLL-noUH-cA" severity="WARNING" description="Checks for valid failure mode detection coverage wrt. safety mechanisms." message="Too high failure mode coverage for {2} given for ''{0}'' wrt. its safety mechanisms." constraintExpression="--context dc::DCFailureModeEntry&#xD;&#xA;&#xD;&#xA;&#x9;&#xD;&#xA;def:&#xD;&#xA;&#x9;doGetMaxDC(maxDC:Real, mechanisms: Sequence(safetyModel::SafetyMechanism)):Real&#xD;&#xA;&#x9;= &#x9;if maxDC &gt;= 99.0 or mechanisms-&gt;isEmpty() then&#xD;&#xA;&#x9;&#x9;&#x9;maxDC&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;mechanism:safetyModel::SafetyMechanism= mechanisms-&gt;first(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;dcValue:Real=&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if mechanism.oclIsKindOf(safetyModel::SafetyMechanism) then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;theDC:safetyModel::DCCoverage= mechanism.oclAsType(safetyModel::SafetyMechanism).maxDC&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if theDC=safetyModel::DCCoverage::LOW then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;60.0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if theDC=safetyModel::DCCoverage::MEDIUM then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;90.0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if theDC=safetyModel::DCCoverage::HIGH then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;99.0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;100.0 -- case NONE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;100.0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if mechanisms-&gt;size()&gt;=2 then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;doGetMaxDC(maxDC.max(dcValue), mechanisms-&gt;subSequence(2,mechanisms-&gt;size()))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;maxDC.max(dcValue)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;def:&#xD;&#xA;&#x9;getMaxDC(mechanisms:Sequence(safetyModel::SafetyMechanism)):Real&#xD;&#xA;&#x9;= doGetMaxDC(0.0, mechanisms)&#xD;&#xA;&#xD;&#xA;inv:&#xD;&#xA;let&#xD;&#xA;&#x9;failureMode:safetyModel::FailureMode= self.element.oclAsType(safetyModel::FailureMode)&#xD;&#xA;in&#xD;&#xA;  if failureMode.failureType = safetyModel::FailureType::TRANSIENT&#xD;&#xA;  then&#xD;&#xA;    true&#xD;&#xA;  else&#xD;&#xA;&#x9;let&#xD;&#xA;&#x9;&#x9;maxSPFDC:Real= self.getMaxDC(failureMode.spfSafetyMechanisms-&gt;asSequence()),&#xD;&#xA;&#x9;&#x9;maxLFDC:Real= self.getMaxDC(failureMode.mpfSafetyMechanisms-&gt;asSequence()),&#xD;&#xA;&#x9;&#x9;MessageArg1:String= if maxSPFDC&lt;self.spfCoverage then 'single-point failure' else '' endif,&#xD;&#xA;&#x9;&#x9;MessageArg2:String= if maxLFDC&lt;self.lmpfCoverage then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if MessageArg1&lt;&gt;'' then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MessageArg1.concat(' and latent failure') -- append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'latent failure'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MessageArg1&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; endif&#xD;&#xA;&#x9;in&#xD;&#xA;&#x9;MessageArg2=''&#xD;&#xA;endif" mediniIdentifier="0040">
    <target xmi:id="_e6bQMX2yEeeVLL-noUH-cA" class="dc::DCFailureModeEntry"/>
  </OCLConstraints:Constraint>
</xmi:XMI>
